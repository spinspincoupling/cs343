(a)
@ubuntu1804-004% /usr/bin/time -f "%Uu %Ss %E" ./q1array 1 10000000
1.02u 0.00s 0:01.02
@ubuntu1804-004% /usr/bin/time -f "%Uu %Ss %E" ./q1array 2 10000000
10.29u 0.02s 0:05.15
@ubuntu1804-004% /usr/bin/time -f "%Uu %Ss %E" ./q1array 4 10000000
35.89u 0.02s 0:09.20

@ubuntu1804-004% /usr/bin/time -f "%Uu %Ss %E" ./q1vector1 1 10000000
1.12u 0.01s 0:01.17
@ubuntu1804-004% /usr/bin/time -f "%Uu %Ss %E" ./q1vector1 2 10000000
10.31u 0.02s 0:05.21
@ubuntu1804-004% /usr/bin/time -f "%Uu %Ss %E" ./q1vector1 4 10000000
47.75u 0.06s 0:12.05

@ubuntu1804-004% /usr/bin/time -f "%Uu %Ss %E" ./q1vector2 1 10000000
5.24u 0.02s 0:05.27
@ubuntu1804-004% /usr/bin/time -f "%Uu %Ss %E" ./q1vector2 2 10000000
78.43u 0.16s 0:39.26
@ubuntu1804-004% /usr/bin/time -f "%Uu %Ss %E" ./q1vector2 4 10000000
470.61u 0.50s 1:57.89

@ubuntu1804-004% /usr/bin/time -f "%Uu %Ss %E" ./q1stack 1 10000000
0.65u 0.00s 0:00.68
@ubuntu1804-004% /usr/bin/time -f "%Uu %Ss %E" ./q1stack 2 10000000
1.36u 0.00s 0:00.70
@ubuntu1804-004% /usr/bin/time -f "%Uu %Ss %E" ./q1stack 4 10000000
2.67u 0.00s 0:00.67


(b) State the performance difference (larger/smaller/by how much) with respect to scaling the number of tasks
for each version.
As number of tasks increases, run time os vector2 increases by the greatest extend, followed by vector2, then array, 
the version using stack has the least increase in run time.

(c) Very briefly (2-4 sentences) speculate on the performance scaling among the versions.
This is because vector2 resizes when the values are inserted, hence there are extra costs to do the multiple 
resizing of the vector. Vector1 and array wrap the actual array in a data structure, extra time is taken to deference
the corresponding index. Hence a stack allocated array takes the least time to access the address. Unique pointer takes
less time than vector as the data structure is less complex so less time is spent on other operations.